{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["style","width","loadItems","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","qrCode","result","wrap","_context","prev","next","axios","get","concat","sent","status","abrupt","itemType","String","data","datePlanted","Date","dateHarvested","stop","_x","apply","this","arguments","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleError","error","console","log","handleLoaded","item","setState","state","loadedItem","handleScan","_ref2","_callee2","selectedId","_context2","includes","split","_x2","startScanning","window","location","search","substr","then","_this2","Child","scanning","react_default","createElement","lib_default","delay","onScan","onError","loading","display","justifyContent","Spinner","animation","displaying","toDateString","toLocaleDateString","Button","onClick","Fragment","Navbar","bg","className","React","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d4e3a39.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport QrReader from 'react-qr-reader';\nimport axios from 'axios';\n\nimport {\n  Navbar, Button, Spinner\n} from 'react-bootstrap';\n\nconst style = {width: '100%'};\n\ninterface Item {\n  itemType: string;\n  datePlanted: Date;\n  dateHarvested: Date;\n}\n\ninterface State {\n  state: 'scanning' | 'loading' | 'displaying';\n  selectedId: string | null;\n  loadedItem: Item | null;\n}\n\nconst loadItems = async (qrCode: string): Promise<Item | null> => {\n  const result = await axios.get(`https://ecofreshwebapi.azurewebsites.net/consumer/item/${qrCode}`);\n  if (result.status === 200) {\n    return {\n      itemType: String(result.data.itemType),\n      datePlanted: new Date(result.data.datePlanted),\n      dateHarvested: new Date(result.data.dateHarvested),\n    };\n  }\n  return null;\n};\n\nclass App extends React.Component<{}, State> {\n  public constructor(props: {}) {\n    super(props);\n    const selectedId = window.location.search;\n    console.log(selectedId);\n    if (selectedId) {\n      this.state = {\n        state: 'loading',\n        selectedId: selectedId.substr(1),\n        loadedItem: null,\n      };\n      loadItems(selectedId.substr(1)).then(this.handleLoaded);\n    } else {\n      this.state = {\n        state: 'scanning',\n        selectedId: null,\n        loadedItem: null,\n      };\n    }\n  }\n\n  handleError = (error: any) => {\n    console.log(error);\n  };\n\n  handleLoaded = (item: Item | null) => {\n    this.setState({\n      state: 'displaying',\n      loadedItem: item,\n    });\n  };\n\n  handleScan = async (selectedId: string | null) => {\n    if (!selectedId) { return; }\n    if (selectedId.includes('?')) {\n      selectedId = selectedId.split('?')[1];\n    }\n    this.setState({\n      state: 'loading',\n      selectedId,\n      loadedItem: null,\n    });\n    const item = await loadItems(selectedId);\n    this.handleLoaded(item);\n  };\n\n  startScanning = () => {\n    this.setState({\n      state: 'scanning',\n      selectedId: null,\n      loadedItem: null,\n    });\n  };\n\n  public render(): JSX.Element {\n    const map = {\n      scanning: () => <QrReader \n        delay={300}\n        onScan={this.handleScan}\n        onError={this.handleError}\n        style={style}\n      />,\n      loading: () => <div style={{display:'flex', justifyContent:'center'}}><Spinner animation='border'/></div>,\n      displaying: () => <div>\n        item {this.state.selectedId}<br/>\n        type: {this.state.loadedItem!.itemType}<br/>\n        harvested on {this.state.loadedItem!.dateHarvested.toDateString()}<br/>\n        planted {this.state.loadedItem!.datePlanted.toLocaleDateString()}<br/>\n        <Button onClick={this.startScanning}>Scan Again</Button>\n      </div>,\n    };\n    const Child = map[this.state.state];\n    return <>\n      <Navbar bg='dark'>\n        <h1 className='text-light'>Ecofresh</h1>\n      </Navbar>\n      <Child/>\n    </>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}